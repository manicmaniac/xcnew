#!/usr/bin/env python3

"""
A script to check differences of usages among manpage, source code and README.
"""

from __future__ import print_function
from argparse import ArgumentParser
from collections import namedtuple
from difflib import unified_diff
import os.path
import re
import subprocess
import sys

BUILD_COMMAND = [
    'xcodebuild',
    '-project', 'xcnew.xcodeproj',
    '-target', 'xcnew',
    '-configuration', 'Debug'
]

SOURCE_PATH = 'Sources/xcnew/XCNOptionParser.m'
README_PATH = 'README.md'


class Option(namedtuple('_Option', ['short_option', 'long_option', 'description'])):
    _caveats_re = re.compile(r'\[.*\] ')

    def __str__(self):
        """
        >>> print(Option('s', 'spam', '[CAVEATS] Spam'))
        -s, --spam  [CAVEATS] Spam
        """
        return '-{self.short_option}, --{self.long_option}  {self.description}'.format(self=self)

    def without_caveats(self):
        """
        >>> print(Option('s', 'spam', '[CAVEATS] Spam').without_caveats())
        -s, --spam  Spam
        """
        return self._replace(description=self._caveats_re.sub('', self.description))


class Usage(namedtuple('_Usage', ['options', 'path'])):
    _manpage_option_re = re.compile(r'^\.It Fl (\w) Li or Fl -([\w-]+)$')
    _source_option_re = re.compile(r'\s*-(\w), --([\w-]+)\s+([^\\\n]+)(?:\\n)?')
    _readme_option_re = _source_option_re

    def __str__(self):
        """
        >>> print(Usage([Option('s', 'spam', 'Spam'), Option('h', 'ham', 'Ham')], ''))
        -s, --spam  Spam
        -h, --ham  Ham
        <BLANKLINE>
        """
        return '\n'.join(map(str, self.options)) + '\n'

    def unified_diff(self, other):
        """
        >>> usage1 = Usage([Option('h', 'ham', 'Ham')], '/old')
        >>> usage2 = Usage([Option('e', 'egg', 'Egg')], '/new')
        >>> print(''.join(usage1.unified_diff(usage2)))
        --- /old
        +++ /new
        @@ -1 +1 @@
        --h, --ham  Ham
        +-e, --egg  Egg
        <BLANKLINE>
        """
        return unified_diff(str(self).splitlines(True), str(other).splitlines(True), self.path, other.path)

    def without_caveats(self):
        """
        >>> print(Usage([Option('s', 'spam', '[CAVEATS] Spam')], '').without_caveats())
        -s, --spam  Spam
        <BLANKLINE>
        """
        return self._replace(options=[option.without_caveats() for option in self.options])

    @classmethod
    def from_manpage(cls, path):
        with open(path) as f:
            options = list(cls._generate_options_from_manpage(f))
        return cls(options, path)

    @classmethod
    def from_source(cls, path):
        with open(path) as f:
            options = list(cls._generate_options_from_source(f))
        return cls(options, path)

    @classmethod
    def from_readme(cls, path):
        with open(path) as f:
            options = list(cls._generate_options_from_readme(f))
        return cls(options, path)

    @classmethod
    def _generate_options_from_manpage(cls, lines):
        """
        >>> usage = Usage([Option('s', 'spam', '[CAVEATS] Spam')], '')
        >>> lines = iter(['.It Fl s|--spam', 'Spam'])
        >>> for option in usage._generate_options_from_manpage(lines):
        ...     print(option)
        -s, --spam  Spam
        """
        for line in lines:
            matched = cls._manpage_option_re.search(line.replace(r'\&', ''))
            if matched:
                description = next(lines).rstrip().replace(r'\&', '')
                yield Option(*matched.groups(), description=description)

    @classmethod
    def _generate_options_from_source(cls, lines):
        """
        >>> usage = Usage([Option('s', 'spam', '[CAVEATS] Spam')], '')
        >>> lines = iter([
        ...     'static const char help[] = ""',
        ...     r'"    -s, --spam  Spam\\n"',
        ...     ';',
        ... ])
        >>> for option in usage._generate_options_from_source(lines):
        ...     print(option)
        -s, --spam  Spam
        """
        for line in lines:
            if line.startswith('static const char help[]'):
                break
        for line in lines:
            matched = cls._source_option_re.search(line)
            if matched:
                yield Option(*matched.groups())
            elif ';' in line:
                break

    @classmethod
    def _generate_options_from_readme(cls, lines):
        """
        >>> usage = Usage([Option('s', 'spam', '[CAVEATS] Spam')], '')
        >>> lines = iter([
        ...     'Options:',
        ...     '    -s, --spam  Spam',
        ...     'Arguments:',
        ... ])
        >>> for option in usage._generate_options_from_readme(lines):
        ...     print(option)
        -s, --spam  Spam
        """
        for line in lines:
            if 'Options:' in line:
                break
        for line in lines:
            matched = cls._readme_option_re.search(line)
            if matched:
                yield Option(*matched.groups())
            elif 'Arguments:' in line:
                break


_built_products_dir_re = re.compile(r'BUILT_PRODUCTS_DIR = (.+)$')


def get_manpage_path():
    for line in subprocess.check_output(BUILD_COMMAND + ['-showBuildSettings'], encoding='utf-8').splitlines():
        print(line)
        matched = _built_products_dir_re.search(line)
        if matched:
            built_products_dir = matched.group(1)
            return os.path.join(built_products_dir, 'xcnew.1')


def build_manpage():
    subprocess.check_call(BUILD_COMMAND+ ['-quiet', 'build'])


def _main(argv=sys.argv):
    parser = ArgumentParser(description=__doc__)
    parser.add_argument('--manpage', help='path to manpage (default: $BUILT_PRODUCTS_DIR/xcnew.1)')
    parser.add_argument('--source', default=SOURCE_PATH, help='path to Objective-C source code (default: {0})'.format(SOURCE_PATH))
    parser.add_argument('--readme', default=README_PATH, help='path to README (default: {0})'.format(README_PATH))
    parser.add_argument('--test', action='store_true', help='run tests and exit')
    args = parser.parse_args(argv[1:])
    if args.test:
        import doctest
        failure_count, _ = doctest.testmod()
        return failure_count % 128
    build_manpage()
    manpage_usage = Usage.from_manpage(args.manpage or get_manpage_path())
    source_usage = Usage.from_source(args.source)
    readme_usage = Usage.from_readme(args.readme)
    diff = ''.join(manpage_usage.unified_diff(readme_usage))
    print(diff, end='')
    if diff:
        diff = manpage_usage.without_caveats().unified_diff(source_usage)
        print(diff, end='')
    if not diff:
        return 1
    return 0


if __name__ == '__main__':
    sys.exit(_main())
